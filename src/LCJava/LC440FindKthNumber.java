package LCJava;

/**
 * Created with IntelliJ IDEA.
 *
 * @author: 11568
 * @date: 2019/12/31
 * Time: 10:57
 * Description:440. 字典序的第K小数字(hard)
 * 给定整数 n 和 k，找到 1 到 n 中字典序第 k 小的数字。
 *
 * 注意：1 ≤ k ≤ n ≤ 109。
 *
 * 示例 :
 *
 * 输入:
 * n: 13   k: 2
 *
 * 输出:
 * 10
 *
 * 解释:
 * 字典序的排列是 [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]，所以第二小的数字是 10。
 *
 * 思路：像我第一反应字典序排序后直接按照下标找，n小的话还很快，n大了的话就直接gg,太慢。下面的方法是看的大神们的，会在下面做注释。
 *
 */
public class LC440FindKthNumber {

    /**
     * 解题思路是把这道题抽象为一个树，一个第一层节点分别为1-9的十叉树，然后在这个树上找到第k小的数字，其实最后就是在这个树的先序遍历找第k个数字
     * 所以，我们需要统计一下当前树的节点个数。假如k小于当前子树的节点个数，那么所求数字就在当前子树中，如果k大于当前子树个数，那么就需要查找后面树
     * 中第(k - 当前树节点)小的数字，所以k也可以理解为走多少步后可以到达我们想到的那个叶子节点
     */
    public static int findKthNumber(int n,int k){
        //当前遍历的起始位置，我们从1开始
        int cur = 1;
        //因为我们一开始从1开始，已经走了一步了，所以这里k先减去1
        --k;
        while (k > 0){
            //start指的是当前节点，end是指的他的下一个兄弟节点，step指的是从start到end需要经过多少个子节点，也就是需要走多少步
            long step = 0,start = cur,end = cur + 1;
            //当前节点小于给出的n，我们就继续遍历
            while (start <= n){
                // 如果当前探索的出发点的子节点形成完全十叉树，Math.min 会取 end，说明子树中就是有这么多个节点
                // Math.min 如果取到 n + 1 ，说明形成完全十叉树所需的节点比 n 还大，那么子树就是不完全的十叉树
                //使用n + 1的原因:举个例子，假若现在上界 n为 12，算出以 1 为前缀的子节点数，首先 1 本身是一个节点，接下来要算下面 10，11，12，一共有 4 个子节点。
                //那么如果用 Math.min(n, end) - cur 会怎么样？
                //这时候算出来会少一个，12 - 10 加上根节点，最后只有 3 个。因此我们务必要写 n+1。
                step += Math.min(n + 1, end) - start;
                // 计算十叉树再展开一层子节点之后，子节点的数量
                // 如果这次展开之后，下一次 end 大于 n + 1 ，就说明有一层节点数量不够形成完全十叉树了
                start *= 10;
                end *= 10;
            }
            //计算完当前节点到他的下一个兄弟节点所需要的步数，就可以与k进行比较，从而把cur对应的十叉树的指针进行移动
            if(step <= k){
                //如果小于当前剩余步数，就直接跳到他的下一个兄弟节点，指针右移，然后减去到达兄弟节点所花的步数，也就是遍历的子节点的数目
                cur ++;
                k -= step;
            }else {
                //如果大于当前剩余步数的话，，我们就把当前指针下移一步倒塌的子节点，相当于先序遍历走了一步，剩余步数减一
                cur *= 10;
                --k;
            }
        }
        return cur;
    }

    public static void main(String[] args) {
        System.out.println(findKthNumber(19,6));
    }
}
